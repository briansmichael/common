<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright (C) 2022 Starfire Aviation, LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.starfireaviation</groupId>
	<artifactId>common</artifactId>
	<version>0.2.0</version>
	<name>common</name>
	<description>Common model objects</description>
	<properties>
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<lombok.version>1.18.30</lombok.version>
		<springboot.version>2.7.5</springboot.version>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
			<version>${lombok.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>${springboot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
			<version>2.7.5</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>4.1</version>
				<configuration>
					<header>${project.basedir}/src/license/license-header.txt</header>
					<properties>
						<owner>${project.organization.name}</owner>
					</properties>
					<mapping>
						<java>SLASHSTAR_STYLE</java>
					</mapping>
					<headerDefinitions>
						<headerDefinition>${project.basedir}/src/license/license-header-style.xml</headerDefinition>
					</headerDefinitions>
					<includes>
						<include>src/main/java/**/*</include>
						<include>src/test/java/**/*</include>
						<include>pom.xml</include>
					</includes>
					<excludes>
						<exclude>**/README</exclude>
						<exclude>src/main/resources/**</exclude>
						<exclude>src/test/resources/**</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>add-licenses</id>
						<phase>process-sources</phase>
						<goals>
							<goal>format</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.1.2</version>
				<dependencies>
					<dependency>
						<groupId>com.puppycrawl.tools</groupId>
						<artifactId>checkstyle</artifactId>
						<version>9.3</version>
					</dependency>
				</dependencies>
				<configuration>
					<checkstyleRules>
						<module name="Checker">
							<module name="LineLength">
								<property name="max" value="120"/>
							</module>
							<module name="JavadocPackage">
								<property name="allowLegacy" value="true"/>
							</module>
							<module name="NewlineAtEndOfFile"/>
							<module name="Translation"/>
							<module name="FileLength"/>
							<module name="FileTabCharacter">
								<property name="eachLine" value="true"/>
							</module>
							<!-- module name="RegexpSingleline">
								<property name="format" value="\s+$"/>
								<property name="websocketMessage" value="Line has trailing spaces."/>
							</module -->
							<module name="TreeWalker">
								<!-- property name="cacheFile" value="${checkstyle.cache.file}"/ -->
								<module name="SuppressWarningsHolder"/>
								<module name="JavadocMethod"/>
								<module name="JavadocType"/>
								<module name="JavadocVariable"/>
								<module name="JavadocStyle"/>
								<module name="ConstantName"/>
								<module name="LocalFinalVariableName"/>
								<module name="LocalVariableName"/>
								<module name="MemberName"/>
								<module name="MethodName"/>
								<module name="PackageName"/>
								<module name="ParameterName"/>
								<module name="StaticVariableName"/>
								<module name="TypeName"/>
								<module name="AvoidStarImport"/>
								<module name="IllegalImport"/> <!-- defaults to sun.* packages -->
								<module name="RedundantImport"/>
								<module name="UnusedImports"/>
								<module name="MethodLength"/>
								<module name="ParameterNumber"/>
								<module name="EmptyForIteratorPad"/>
								<module name="MethodParamPad"/>
								<module name="NoWhitespaceAfter"/>
								<module name="NoWhitespaceBefore"/>
								<module name="OperatorWrap"/>
								<module name="ParenPad"/>
								<module name="TypecastParenPad"/>
								<module name="WhitespaceAfter"/>
								<module name="WhitespaceAround"/>
								<module name="ModifierOrder"/>
								<module name="RedundantModifier"/>
								<module name="AvoidNestedBlocks"/>
								<module name="EmptyBlock"/>
								<module name="LeftCurly"/>
								<module name="NeedBraces"/>
								<module name="RightCurly"/>
								<module name="AvoidInlineConditionals"/>
								<module name="EmptyStatement"/>
								<module name="EqualsHashCode"/>
								<module name="HiddenField"/>
								<module name="IllegalInstantiation"/>
								<module name="InnerAssignment"/>
								<module name="MagicNumber"/>
								<module name="MissingSwitchDefault"/>
								<module name="SimplifyBooleanExpression"/>
								<module name="SimplifyBooleanReturn"/>
								<module name="DesignForExtension"/>
								<!-- module name="FinalClass"/ -->
								<!-- module name="HideUtilityClassConstructor"/ -->
								<module name="InterfaceIsType"/>
								<module name="VisibilityModifier"/>
								<module name="ArrayTypeStyle"/>
								<module name="FinalParameters"/>
								<module name="TodoComment"/>
								<module name="UpperEll"/>
							</module>
							<module name="SuppressWarningsFilter"/>
							<module name="UniqueProperties"/>
						</module>
					</checkstyleRules>
					<consoleOutput>true</consoleOutput>
					<failOnViolation>true</failOnViolation>
					<includeResources>false</includeResources>
					<includeTestSourceDirectory>false</includeTestSourceDirectory>
					<!-- Only check the actual source directories in src, not anything generated in target. -->
					<sourceDirectories>
						<sourceDirectory>src/main/java</sourceDirectory>
					</sourceDirectories>
					<testSourceDirectories>
						<testSourceDirectory>src/test/java</testSourceDirectory>
					</testSourceDirectories>
				</configuration>
				<executions>
					<!--
  Execute checkstyle after compilation but before tests.
  This ensures that any parsing or type checking errors are from
  javac, so they look as expected. Beyond that, we want to
  fail as early as possible.
-->
					<execution>
						<phase>test-compile</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.2</version>
			</plugin>
		</plugins>
	</build>

</project>
